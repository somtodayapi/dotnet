//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace TestEnv1
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMetaDataProvider __appProvider;
        private global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace TestEnv1.TestEnv1_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::TestEnv1.TestEnv1_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::TestEnv1.TestEnv1_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[49];
            _typeNameTable[0] = "Template10.Common.BootStrapper";
            _typeNameTable[1] = "Windows.UI.Xaml.Application";
            _typeNameTable[2] = "Template10.Common.StateItems";
            _typeNameTable[3] = "System.Collections.Generic.Dictionary`2<String, Object>";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "String";
            _typeNameTable[6] = "Template10.Services.NavigationService.INavigationService";
            _typeNameTable[7] = "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>";
            _typeNameTable[8] = "System.MulticastDelegate";
            _typeNameTable[9] = "System.Delegate";
            _typeNameTable[10] = "TimeSpan";
            _typeNameTable[11] = "System.ValueType";
            _typeNameTable[12] = "Boolean";
            _typeNameTable[13] = "Windows.ApplicationModel.Activation.IActivatedEventArgs";
            _typeNameTable[14] = "Template10.Common.BootStrapper.States";
            _typeNameTable[15] = "System.Enum";
            _typeNameTable[16] = "Template10.Controls.ModalDialog";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[18] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[19] = "TestEnv1.ViewModel.MainPageViewModel";
            _typeNameTable[20] = "Template10.Mvvm.ViewModelBase";
            _typeNameTable[21] = "Template10.Mvvm.BindableBase";
            _typeNameTable[22] = "Template10.Common.IDispatcherWrapper";
            _typeNameTable[23] = "Template10.Common.IStateItems";
            _typeNameTable[24] = "TestEnv1.MainPage";
            _typeNameTable[25] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[26] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[27] = "Template10.Controls.PageHeader";
            _typeNameTable[28] = "Windows.UI.Xaml.Controls.CommandBar";
            _typeNameTable[29] = "Double";
            _typeNameTable[30] = "Template10.Behaviors.EllipsisBehavior.Visibilities";
            _typeNameTable[31] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[32] = "Windows.UI.Xaml.Controls.Symbol";
            _typeNameTable[33] = "Windows.UI.Xaml.Controls.Frame";
            _typeNameTable[34] = "Windows.UI.Color";
            _typeNameTable[35] = "Byte";
            _typeNameTable[36] = "TestEnv1.ViewModel.CijferViewModel";
            _typeNameTable[37] = "System.Collections.ObjectModel.ObservableCollection`1<TestEnv1.Model.CijferGem>";
            _typeNameTable[38] = "System.Collections.ObjectModel.Collection`1<TestEnv1.Model.CijferGem>";
            _typeNameTable[39] = "TestEnv1.Model.CijferGem";
            _typeNameTable[40] = "TestEnv1.Views.Cijfer";
            _typeNameTable[41] = "TestEnv1.Views.Home";
            _typeNameTable[42] = "TestEnv1.ViewModel.LoginViewModel";
            _typeNameTable[43] = "SOMTodayUWP.Models.Instellingen";
            _typeNameTable[44] = "System.Collections.ObjectModel.ObservableCollection`1<SOMTodayUWP.Models.Instellingen>";
            _typeNameTable[45] = "System.Collections.ObjectModel.Collection`1<SOMTodayUWP.Models.Instellingen>";
            _typeNameTable[46] = "Template10.Mvvm.DelegateCommand";
            _typeNameTable[47] = "TestEnv1.Views.Inloggen";
            _typeNameTable[48] = "TestEnv1.Views.Test";

            _typeTable = new global::System.Type[49];
            _typeTable[0] = typeof(global::Template10.Common.BootStrapper);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Application);
            _typeTable[2] = typeof(global::Template10.Common.StateItems);
            _typeTable[3] = typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::System.String);
            _typeTable[6] = typeof(global::Template10.Services.NavigationService.INavigationService);
            _typeTable[7] = typeof(global::System.Func<global::Windows.ApplicationModel.Activation.SplashScreen, global::Windows.UI.Xaml.Controls.UserControl>);
            _typeTable[8] = typeof(global::System.MulticastDelegate);
            _typeTable[9] = typeof(global::System.Delegate);
            _typeTable[10] = typeof(global::System.TimeSpan);
            _typeTable[11] = typeof(global::System.ValueType);
            _typeTable[12] = typeof(global::System.Boolean);
            _typeTable[13] = typeof(global::Windows.ApplicationModel.Activation.IActivatedEventArgs);
            _typeTable[14] = typeof(global::Template10.Common.BootStrapper.States);
            _typeTable[15] = typeof(global::System.Enum);
            _typeTable[16] = typeof(global::Template10.Controls.ModalDialog);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[19] = typeof(global::TestEnv1.ViewModel.MainPageViewModel);
            _typeTable[20] = typeof(global::Template10.Mvvm.ViewModelBase);
            _typeTable[21] = typeof(global::Template10.Mvvm.BindableBase);
            _typeTable[22] = typeof(global::Template10.Common.IDispatcherWrapper);
            _typeTable[23] = typeof(global::Template10.Common.IStateItems);
            _typeTable[24] = typeof(global::TestEnv1.MainPage);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[27] = typeof(global::Template10.Controls.PageHeader);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Controls.CommandBar);
            _typeTable[29] = typeof(global::System.Double);
            _typeTable[30] = typeof(global::Template10.Behaviors.EllipsisBehavior.Visibilities);
            _typeTable[31] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.Controls.Symbol);
            _typeTable[33] = typeof(global::Windows.UI.Xaml.Controls.Frame);
            _typeTable[34] = typeof(global::Windows.UI.Color);
            _typeTable[35] = typeof(global::System.Byte);
            _typeTable[36] = typeof(global::TestEnv1.ViewModel.CijferViewModel);
            _typeTable[37] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::TestEnv1.Model.CijferGem>);
            _typeTable[38] = typeof(global::System.Collections.ObjectModel.Collection<global::TestEnv1.Model.CijferGem>);
            _typeTable[39] = typeof(global::TestEnv1.Model.CijferGem);
            _typeTable[40] = typeof(global::TestEnv1.Views.Cijfer);
            _typeTable[41] = typeof(global::TestEnv1.Views.Home);
            _typeTable[42] = typeof(global::TestEnv1.ViewModel.LoginViewModel);
            _typeTable[43] = typeof(global::SOMTodayUWP.Models.Instellingen);
            _typeTable[44] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::SOMTodayUWP.Models.Instellingen>);
            _typeTable[45] = typeof(global::System.Collections.ObjectModel.Collection<global::SOMTodayUWP.Models.Instellingen>);
            _typeTable[46] = typeof(global::Template10.Mvvm.DelegateCommand);
            _typeTable[47] = typeof(global::TestEnv1.Views.Inloggen);
            _typeTable[48] = typeof(global::TestEnv1.Views.Test);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_2_StateItems() { return new global::Template10.Common.StateItems(); }
        private object Activate_3_Dictionary() { return new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>(); }
        private object Activate_16_ModalDialog() { return new global::Template10.Controls.ModalDialog(); }
        private object Activate_19_MainPageViewModel() { return new global::TestEnv1.ViewModel.MainPageViewModel(); }
        private object Activate_24_MainPage() { return new global::TestEnv1.MainPage(); }
        private object Activate_27_PageHeader() { return new global::Template10.Controls.PageHeader(); }
        private object Activate_36_CijferViewModel() { return new global::TestEnv1.ViewModel.CijferViewModel(); }
        private object Activate_37_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::TestEnv1.Model.CijferGem>(); }
        private object Activate_38_Collection() { return new global::System.Collections.ObjectModel.Collection<global::TestEnv1.Model.CijferGem>(); }
        private object Activate_39_CijferGem() { return new global::TestEnv1.Model.CijferGem(); }
        private object Activate_40_Cijfer() { return new global::TestEnv1.Views.Cijfer(); }
        private object Activate_41_Home() { return new global::TestEnv1.Views.Home(); }
        private object Activate_42_LoginViewModel() { return new global::TestEnv1.ViewModel.LoginViewModel(); }
        private object Activate_43_Instellingen() { return new global::SOMTodayUWP.Models.Instellingen(); }
        private object Activate_44_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::SOMTodayUWP.Models.Instellingen>(); }
        private object Activate_45_Collection() { return new global::System.Collections.ObjectModel.Collection<global::SOMTodayUWP.Models.Instellingen>(); }
        private object Activate_47_Inloggen() { return new global::TestEnv1.Views.Inloggen(); }
        private object Activate_48_Test() { return new global::TestEnv1.Views.Test(); }
        private void MapAdd_2_StateItems(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void MapAdd_3_Dictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_37_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::TestEnv1.Model.CijferGem>)instance;
            var newItem = (global::TestEnv1.Model.CijferGem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_38_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::TestEnv1.Model.CijferGem>)instance;
            var newItem = (global::TestEnv1.Model.CijferGem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_44_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::SOMTodayUWP.Models.Instellingen>)instance;
            var newItem = (global::SOMTodayUWP.Models.Instellingen)item;
            collection.Add(newItem);
        }
        private void VectorAdd_45_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::SOMTodayUWP.Models.Instellingen>)instance;
            var newItem = (global::SOMTodayUWP.Models.Instellingen)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Template10.Common.BootStrapper
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Application"));
                userType.AddMemberName("SessionState");
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("SplashFactory");
                userType.AddMemberName("CacheMaxDuration");
                userType.AddMemberName("ShowShellBackButton");
                userType.AddMemberName("ForceShowShellBackButton");
                userType.AddMemberName("OriginalActivatedArgs");
                userType.AddMemberName("CurrentState");
                userType.AddMemberName("EnableAutoRestoreAfterTerminated");
                userType.AddMemberName("AutoRestoreAfterTerminated");
                userType.AddMemberName("AutoExtendExecutionSession");
                userType.AddMemberName("AutoSuspendAllFrames");
                userType.AddMemberName("ModalDialog");
                userType.AddMemberName("ModalContent");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Application
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Template10.Common.StateItems
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.Generic.Dictionary`2<String, Object>"));
                userType.DictionaryAdd = MapAdd_2_StateItems;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  System.Collections.Generic.Dictionary`2<String, Object>
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_Dictionary;
                userType.DictionaryAdd = MapAdd_3_Dictionary;
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  String
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Template10.Services.NavigationService.INavigationService
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  System.MulticastDelegate
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 9:   //  System.Delegate
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 10:   //  TimeSpan
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  System.ValueType
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 12:   //  Boolean
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.ApplicationModel.Activation.IActivatedEventArgs
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Template10.Common.BootStrapper.States
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Template10.Common.BootStrapper.States.None);
                userType.AddEnumValue("Running", global::Template10.Common.BootStrapper.States.Running);
                userType.AddEnumValue("BeforeInit", global::Template10.Common.BootStrapper.States.BeforeInit);
                userType.AddEnumValue("AfterInit", global::Template10.Common.BootStrapper.States.AfterInit);
                userType.AddEnumValue("BeforeLaunch", global::Template10.Common.BootStrapper.States.BeforeLaunch);
                userType.AddEnumValue("AfterLaunch", global::Template10.Common.BootStrapper.States.AfterLaunch);
                userType.AddEnumValue("BeforeActivate", global::Template10.Common.BootStrapper.States.BeforeActivate);
                userType.AddEnumValue("AfterActivate", global::Template10.Common.BootStrapper.States.AfterActivate);
                userType.AddEnumValue("BeforeStart", global::Template10.Common.BootStrapper.States.BeforeStart);
                userType.AddEnumValue("AfterStart", global::Template10.Common.BootStrapper.States.AfterStart);
                xamlType = userType;
                break;

            case 15:   //  System.Enum
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 16:   //  Template10.Controls.ModalDialog
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  TestEnv1.ViewModel.MainPageViewModel
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_19_MainPageViewModel;
                userType.AddMemberName("Username");
                userType.AddMemberName("Password");
                userType.AddMemberName("Title");
                userType.AddMemberName("Home");
                userType.AddMemberName("Grade");
                userType.AddMemberName("Huiswerk");
                userType.AddMemberName("Rooster");
                userType.AddMemberName("Vakken");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Template10.Mvvm.ViewModelBase
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.BindableBase"));
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("Dispatcher");
                userType.AddMemberName("SessionState");
                xamlType = userType;
                break;

            case 21:   //  Template10.Mvvm.BindableBase
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 22:   //  Template10.Common.IDispatcherWrapper
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  Template10.Common.IStateItems
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  TestEnv1.MainPage
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  Template10.Controls.PageHeader
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.CommandBar"));
                userType.Activator = Activate_27_PageHeader;
                userType.AddMemberName("VisualStateNarrowMinWidth");
                userType.AddMemberName("VisualStateNormalMinWidth");
                userType.AddMemberName("EllipsisVisibility");
                userType.AddMemberName("PrimaryCommandsVisibility");
                userType.AddMemberName("BackButtonVisibility");
                userType.AddMemberName("BackButtonContent");
                userType.AddMemberName("Frame");
                userType.AddMemberName("EnableHamburgerMenuAutoLayout");
                userType.AddMemberName("Text");
                xamlType = userType;
                break;

            case 28:   //  Windows.UI.Xaml.Controls.CommandBar
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Double
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Template10.Behaviors.EllipsisBehavior.Visibilities
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Visible", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Visible);
                userType.AddEnumValue("Collapsed", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Collapsed);
                userType.AddEnumValue("Auto", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Auto);
                xamlType = userType;
                break;

            case 31:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Windows.UI.Xaml.Controls.Symbol
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Windows.UI.Xaml.Controls.Frame
                xamlType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  Windows.UI.Color
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 35:   //  Byte
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  TestEnv1.ViewModel.CijferViewModel
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_36_CijferViewModel;
                userType.AddMemberName("Cijfers");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  System.Collections.ObjectModel.ObservableCollection`1<TestEnv1.Model.CijferGem>
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<TestEnv1.Model.CijferGem>"));
                userType.CollectionAdd = VectorAdd_37_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  System.Collections.ObjectModel.Collection`1<TestEnv1.Model.CijferGem>
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_38_Collection;
                userType.CollectionAdd = VectorAdd_38_Collection;
                xamlType = userType;
                break;

            case 39:   //  TestEnv1.Model.CijferGem
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_39_CijferGem;
                userType.AddMemberName("Vaknaam");
                userType.AddMemberName("Laatste_Cijfer");
                userType.AddMemberName("Gem");
                userType.AddMemberName("Achtergrondkleur");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  TestEnv1.Views.Cijfer
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_40_Cijfer;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  TestEnv1.Views.Home
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_41_Home;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  TestEnv1.ViewModel.LoginViewModel
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_42_LoginViewModel;
                userType.AddMemberName("SelectedComboboxItem");
                userType.AddMemberName("Schools");
                userType.AddMemberName("Username");
                userType.AddMemberName("UUID");
                userType.AddMemberName("Password");
                userType.AddMemberName("RememberLoginData");
                userType.AddMemberName("Title");
                userType.AddMemberName("Sub");
                userType.AddMemberName("Paragraph");
                userType.AddMemberName("Button_read");
                userType.AddMemberName("OrLogin");
                userType.AddMemberName("ChooseSchool");
                userType.AddMemberName("UsernameBox");
                userType.AddMemberName("PasswordBox");
                userType.AddMemberName("RememberMe");
                userType.AddMemberName("Login_button");
                userType.AddMemberName("ChooseLang");
                userType.AddMemberName("DoSOMLogin");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  SOMTodayUWP.Models.Instellingen
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_43_Instellingen;
                userType.AddMemberName("naam");
                userType.AddMemberName("plaats");
                userType.AddMemberName("uuid");
                xamlType = userType;
                break;

            case 44:   //  System.Collections.ObjectModel.ObservableCollection`1<SOMTodayUWP.Models.Instellingen>
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<SOMTodayUWP.Models.Instellingen>"));
                userType.CollectionAdd = VectorAdd_44_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 45:   //  System.Collections.ObjectModel.Collection`1<SOMTodayUWP.Models.Instellingen>
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_45_Collection;
                userType.CollectionAdd = VectorAdd_45_Collection;
                xamlType = userType;
                break;

            case 46:   //  Template10.Mvvm.DelegateCommand
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 47:   //  TestEnv1.Views.Inloggen
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_47_Inloggen;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  TestEnv1.Views.Test
                userType = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_48_Test;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Template10.Template10__Library__XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_BootStrapper_SessionState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SessionState;
        }
        private void set_0_BootStrapper_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.SessionState = (global::Template10.Common.StateItems)Value;
        }
        private object get_1_BootStrapper_NavigationService(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.NavigationService;
        }
        private object get_2_BootStrapper_SplashFactory(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SplashFactory;
        }
        private object get_3_BootStrapper_CacheMaxDuration(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CacheMaxDuration;
        }
        private void set_3_BootStrapper_CacheMaxDuration(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CacheMaxDuration = (global::System.TimeSpan)Value;
        }
        private object get_4_BootStrapper_ShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ShowShellBackButton;
        }
        private void set_4_BootStrapper_ShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_5_BootStrapper_ForceShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ForceShowShellBackButton;
        }
        private void set_5_BootStrapper_ForceShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ForceShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_6_BootStrapper_OriginalActivatedArgs(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.OriginalActivatedArgs;
        }
        private object get_7_BootStrapper_CurrentState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CurrentState;
        }
        private void set_7_BootStrapper_CurrentState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CurrentState = (global::Template10.Common.BootStrapper.States)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_8_BootStrapper_EnableAutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.EnableAutoRestoreAfterTerminated;
        }
        private void set_8_BootStrapper_EnableAutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.EnableAutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
#pragma warning restore 0618
        private object get_9_BootStrapper_AutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoRestoreAfterTerminated;
        }
        private void set_9_BootStrapper_AutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
        private object get_10_BootStrapper_AutoExtendExecutionSession(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoExtendExecutionSession;
        }
        private void set_10_BootStrapper_AutoExtendExecutionSession(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoExtendExecutionSession = (global::System.Boolean)Value;
        }
        private object get_11_BootStrapper_AutoSuspendAllFrames(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoSuspendAllFrames;
        }
        private void set_11_BootStrapper_AutoSuspendAllFrames(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoSuspendAllFrames = (global::System.Boolean)Value;
        }
        private object get_12_BootStrapper_ModalDialog(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalDialog;
        }
        private object get_13_BootStrapper_ModalContent(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalContent;
        }
        private void set_13_BootStrapper_ModalContent(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ModalContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_14_MainPageViewModel_Username(object instance)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            return that.Username;
        }
        private void set_14_MainPageViewModel_Username(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            that.Username = (global::System.String)Value;
        }
        private object get_15_MainPageViewModel_Password(object instance)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            return that.Password;
        }
        private void set_15_MainPageViewModel_Password(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            that.Password = (global::System.String)Value;
        }
        private object get_16_MainPageViewModel_Title(object instance)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            return that.Title;
        }
        private void set_16_MainPageViewModel_Title(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_17_MainPageViewModel_Home(object instance)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            return that.Home;
        }
        private void set_17_MainPageViewModel_Home(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            that.Home = (global::System.String)Value;
        }
        private object get_18_MainPageViewModel_Grade(object instance)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            return that.Grade;
        }
        private void set_18_MainPageViewModel_Grade(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            that.Grade = (global::System.String)Value;
        }
        private object get_19_MainPageViewModel_Huiswerk(object instance)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            return that.Huiswerk;
        }
        private void set_19_MainPageViewModel_Huiswerk(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            that.Huiswerk = (global::System.String)Value;
        }
        private object get_20_MainPageViewModel_Rooster(object instance)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            return that.Rooster;
        }
        private void set_20_MainPageViewModel_Rooster(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            that.Rooster = (global::System.String)Value;
        }
        private object get_21_MainPageViewModel_Vakken(object instance)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            return that.Vakken;
        }
        private void set_21_MainPageViewModel_Vakken(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.MainPageViewModel)instance;
            that.Vakken = (global::System.String)Value;
        }
        private object get_22_ViewModelBase_NavigationService(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.NavigationService;
        }
        private void set_22_ViewModelBase_NavigationService(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.NavigationService = (global::Template10.Services.NavigationService.INavigationService)Value;
        }
        private object get_23_ViewModelBase_Dispatcher(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.Dispatcher;
        }
        private void set_23_ViewModelBase_Dispatcher(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.Dispatcher = (global::Template10.Common.IDispatcherWrapper)Value;
        }
        private object get_24_ViewModelBase_SessionState(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.SessionState;
        }
        private void set_24_ViewModelBase_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.SessionState = (global::Template10.Common.IStateItems)Value;
        }
        private object get_25_PageHeader_VisualStateNarrowMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNarrowMinWidth;
        }
        private void set_25_PageHeader_VisualStateNarrowMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNarrowMinWidth = (global::System.Double)Value;
        }
        private object get_26_PageHeader_VisualStateNormalMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNormalMinWidth;
        }
        private void set_26_PageHeader_VisualStateNormalMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNormalMinWidth = (global::System.Double)Value;
        }
        private object get_27_PageHeader_EllipsisVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EllipsisVisibility;
        }
        private void set_27_PageHeader_EllipsisVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EllipsisVisibility = (global::Template10.Behaviors.EllipsisBehavior.Visibilities)Value;
        }
        private object get_28_PageHeader_PrimaryCommandsVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.PrimaryCommandsVisibility;
        }
        private void set_28_PageHeader_PrimaryCommandsVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.PrimaryCommandsVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_29_PageHeader_BackButtonVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonVisibility;
        }
        private void set_29_PageHeader_BackButtonVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_30_PageHeader_BackButtonContent(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonContent;
        }
        private void set_30_PageHeader_BackButtonContent(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonContent = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_31_PageHeader_Frame(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Frame;
        }
        private void set_31_PageHeader_Frame(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Frame = (global::Windows.UI.Xaml.Controls.Frame)Value;
        }
        private object get_32_PageHeader_EnableHamburgerMenuAutoLayout(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EnableHamburgerMenuAutoLayout;
        }
        private void set_32_PageHeader_EnableHamburgerMenuAutoLayout(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EnableHamburgerMenuAutoLayout = (global::System.Boolean)Value;
        }
        private object get_33_PageHeader_Text(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Text;
        }
        private void set_33_PageHeader_Text(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_34_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_34_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_35_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_35_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_36_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_36_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_37_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_37_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_38_CijferViewModel_Cijfers(object instance)
        {
            var that = (global::TestEnv1.ViewModel.CijferViewModel)instance;
            return that.Cijfers;
        }
        private void set_38_CijferViewModel_Cijfers(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.CijferViewModel)instance;
            that.Cijfers = (global::System.Collections.ObjectModel.ObservableCollection<global::TestEnv1.Model.CijferGem>)Value;
        }
        private object get_39_CijferGem_Vaknaam(object instance)
        {
            var that = (global::TestEnv1.Model.CijferGem)instance;
            return that.Vaknaam;
        }
        private void set_39_CijferGem_Vaknaam(object instance, object Value)
        {
            var that = (global::TestEnv1.Model.CijferGem)instance;
            that.Vaknaam = (global::System.String)Value;
        }
        private object get_40_CijferGem_Laatste_Cijfer(object instance)
        {
            var that = (global::TestEnv1.Model.CijferGem)instance;
            return that.Laatste_Cijfer;
        }
        private void set_40_CijferGem_Laatste_Cijfer(object instance, object Value)
        {
            var that = (global::TestEnv1.Model.CijferGem)instance;
            that.Laatste_Cijfer = (global::System.String)Value;
        }
        private object get_41_CijferGem_Gem(object instance)
        {
            var that = (global::TestEnv1.Model.CijferGem)instance;
            return that.Gem;
        }
        private void set_41_CijferGem_Gem(object instance, object Value)
        {
            var that = (global::TestEnv1.Model.CijferGem)instance;
            that.Gem = (global::System.String)Value;
        }
        private object get_42_CijferGem_Achtergrondkleur(object instance)
        {
            var that = (global::TestEnv1.Model.CijferGem)instance;
            return that.Achtergrondkleur;
        }
        private void set_42_CijferGem_Achtergrondkleur(object instance, object Value)
        {
            var that = (global::TestEnv1.Model.CijferGem)instance;
            that.Achtergrondkleur = (global::System.String)Value;
        }
        private object get_43_LoginViewModel_SelectedComboboxItem(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.SelectedComboboxItem;
        }
        private void set_43_LoginViewModel_SelectedComboboxItem(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.SelectedComboboxItem = (global::SOMTodayUWP.Models.Instellingen)Value;
        }
        private object get_44_LoginViewModel_Schools(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.Schools;
        }
        private void set_44_LoginViewModel_Schools(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.Schools = (global::System.Collections.ObjectModel.ObservableCollection<global::SOMTodayUWP.Models.Instellingen>)Value;
        }
        private object get_45_Instellingen_naam(object instance)
        {
            var that = (global::SOMTodayUWP.Models.Instellingen)instance;
            return that.naam;
        }
        private void set_45_Instellingen_naam(object instance, object Value)
        {
            var that = (global::SOMTodayUWP.Models.Instellingen)instance;
            that.naam = (global::System.String)Value;
        }
        private object get_46_Instellingen_plaats(object instance)
        {
            var that = (global::SOMTodayUWP.Models.Instellingen)instance;
            return that.plaats;
        }
        private void set_46_Instellingen_plaats(object instance, object Value)
        {
            var that = (global::SOMTodayUWP.Models.Instellingen)instance;
            that.plaats = (global::System.String)Value;
        }
        private object get_47_Instellingen_uuid(object instance)
        {
            var that = (global::SOMTodayUWP.Models.Instellingen)instance;
            return that.uuid;
        }
        private void set_47_Instellingen_uuid(object instance, object Value)
        {
            var that = (global::SOMTodayUWP.Models.Instellingen)instance;
            that.uuid = (global::System.String)Value;
        }
        private object get_48_LoginViewModel_Username(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.Username;
        }
        private void set_48_LoginViewModel_Username(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.Username = (global::System.String)Value;
        }
        private object get_49_LoginViewModel_UUID(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.UUID;
        }
        private void set_49_LoginViewModel_UUID(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.UUID = (global::System.String)Value;
        }
        private object get_50_LoginViewModel_Password(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.Password;
        }
        private void set_50_LoginViewModel_Password(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.Password = (global::System.String)Value;
        }
        private object get_51_LoginViewModel_RememberLoginData(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.RememberLoginData;
        }
        private void set_51_LoginViewModel_RememberLoginData(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.RememberLoginData = (global::System.Boolean)Value;
        }
        private object get_52_LoginViewModel_Title(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.Title;
        }
        private void set_52_LoginViewModel_Title(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_53_LoginViewModel_Sub(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.Sub;
        }
        private void set_53_LoginViewModel_Sub(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.Sub = (global::System.String)Value;
        }
        private object get_54_LoginViewModel_Paragraph(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.Paragraph;
        }
        private void set_54_LoginViewModel_Paragraph(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.Paragraph = (global::System.String)Value;
        }
        private object get_55_LoginViewModel_Button_read(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.Button_read;
        }
        private void set_55_LoginViewModel_Button_read(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.Button_read = (global::System.String)Value;
        }
        private object get_56_LoginViewModel_OrLogin(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.OrLogin;
        }
        private void set_56_LoginViewModel_OrLogin(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.OrLogin = (global::System.String)Value;
        }
        private object get_57_LoginViewModel_ChooseSchool(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.ChooseSchool;
        }
        private void set_57_LoginViewModel_ChooseSchool(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.ChooseSchool = (global::System.String)Value;
        }
        private object get_58_LoginViewModel_UsernameBox(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.UsernameBox;
        }
        private void set_58_LoginViewModel_UsernameBox(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.UsernameBox = (global::System.String)Value;
        }
        private object get_59_LoginViewModel_PasswordBox(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.PasswordBox;
        }
        private void set_59_LoginViewModel_PasswordBox(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.PasswordBox = (global::System.String)Value;
        }
        private object get_60_LoginViewModel_RememberMe(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.RememberMe;
        }
        private void set_60_LoginViewModel_RememberMe(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.RememberMe = (global::System.String)Value;
        }
        private object get_61_LoginViewModel_Login_button(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.Login_button;
        }
        private void set_61_LoginViewModel_Login_button(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.Login_button = (global::System.String)Value;
        }
        private object get_62_LoginViewModel_ChooseLang(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.ChooseLang;
        }
        private void set_62_LoginViewModel_ChooseLang(object instance, object Value)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            that.ChooseLang = (global::System.String)Value;
        }
        private object get_63_LoginViewModel_DoSOMLogin(object instance)
        {
            var that = (global::TestEnv1.ViewModel.LoginViewModel)instance;
            return that.DoSOMLogin;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember xamlMember = null;
            global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Template10.Common.BootStrapper.SessionState":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.StateItems");
                xamlMember.Getter = get_0_BootStrapper_SessionState;
                xamlMember.Setter = set_0_BootStrapper_SessionState;
                break;
            case "Template10.Common.BootStrapper.NavigationService":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_1_BootStrapper_NavigationService;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.SplashFactory":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "SplashFactory", "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>");
                xamlMember.Getter = get_2_BootStrapper_SplashFactory;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.CacheMaxDuration":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "CacheMaxDuration", "TimeSpan");
                xamlMember.Getter = get_3_BootStrapper_CacheMaxDuration;
                xamlMember.Setter = set_3_BootStrapper_CacheMaxDuration;
                break;
            case "Template10.Common.BootStrapper.ShowShellBackButton":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "ShowShellBackButton", "Boolean");
                xamlMember.Getter = get_4_BootStrapper_ShowShellBackButton;
                xamlMember.Setter = set_4_BootStrapper_ShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.ForceShowShellBackButton":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "ForceShowShellBackButton", "Boolean");
                xamlMember.Getter = get_5_BootStrapper_ForceShowShellBackButton;
                xamlMember.Setter = set_5_BootStrapper_ForceShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.OriginalActivatedArgs":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "OriginalActivatedArgs", "Windows.ApplicationModel.Activation.IActivatedEventArgs");
                xamlMember.Getter = get_6_BootStrapper_OriginalActivatedArgs;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.CurrentState":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "CurrentState", "Template10.Common.BootStrapper.States");
                xamlMember.Getter = get_7_BootStrapper_CurrentState;
                xamlMember.Setter = set_7_BootStrapper_CurrentState;
                break;
            case "Template10.Common.BootStrapper.EnableAutoRestoreAfterTerminated":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "EnableAutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_8_BootStrapper_EnableAutoRestoreAfterTerminated;
                xamlMember.Setter = set_8_BootStrapper_EnableAutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.AutoRestoreAfterTerminated":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "AutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_9_BootStrapper_AutoRestoreAfterTerminated;
                xamlMember.Setter = set_9_BootStrapper_AutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.AutoExtendExecutionSession":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "AutoExtendExecutionSession", "Boolean");
                xamlMember.Getter = get_10_BootStrapper_AutoExtendExecutionSession;
                xamlMember.Setter = set_10_BootStrapper_AutoExtendExecutionSession;
                break;
            case "Template10.Common.BootStrapper.AutoSuspendAllFrames":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "AutoSuspendAllFrames", "Boolean");
                xamlMember.Getter = get_11_BootStrapper_AutoSuspendAllFrames;
                xamlMember.Setter = set_11_BootStrapper_AutoSuspendAllFrames;
                break;
            case "Template10.Common.BootStrapper.ModalDialog":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "ModalDialog", "Template10.Controls.ModalDialog");
                xamlMember.Getter = get_12_BootStrapper_ModalDialog;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.ModalContent":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "ModalContent", "Windows.UI.Xaml.UIElement");
                xamlMember.Getter = get_13_BootStrapper_ModalContent;
                xamlMember.Setter = set_13_BootStrapper_ModalContent;
                break;
            case "TestEnv1.ViewModel.MainPageViewModel.Username":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.MainPageViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Username", "String");
                xamlMember.Getter = get_14_MainPageViewModel_Username;
                xamlMember.Setter = set_14_MainPageViewModel_Username;
                break;
            case "TestEnv1.ViewModel.MainPageViewModel.Password":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.MainPageViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Password", "String");
                xamlMember.Getter = get_15_MainPageViewModel_Password;
                xamlMember.Setter = set_15_MainPageViewModel_Password;
                break;
            case "TestEnv1.ViewModel.MainPageViewModel.Title":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.MainPageViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_16_MainPageViewModel_Title;
                xamlMember.Setter = set_16_MainPageViewModel_Title;
                break;
            case "TestEnv1.ViewModel.MainPageViewModel.Home":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.MainPageViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Home", "String");
                xamlMember.Getter = get_17_MainPageViewModel_Home;
                xamlMember.Setter = set_17_MainPageViewModel_Home;
                break;
            case "TestEnv1.ViewModel.MainPageViewModel.Grade":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.MainPageViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Grade", "String");
                xamlMember.Getter = get_18_MainPageViewModel_Grade;
                xamlMember.Setter = set_18_MainPageViewModel_Grade;
                break;
            case "TestEnv1.ViewModel.MainPageViewModel.Huiswerk":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.MainPageViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Huiswerk", "String");
                xamlMember.Getter = get_19_MainPageViewModel_Huiswerk;
                xamlMember.Setter = set_19_MainPageViewModel_Huiswerk;
                break;
            case "TestEnv1.ViewModel.MainPageViewModel.Rooster":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.MainPageViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Rooster", "String");
                xamlMember.Getter = get_20_MainPageViewModel_Rooster;
                xamlMember.Setter = set_20_MainPageViewModel_Rooster;
                break;
            case "TestEnv1.ViewModel.MainPageViewModel.Vakken":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.MainPageViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Vakken", "String");
                xamlMember.Getter = get_21_MainPageViewModel_Vakken;
                xamlMember.Setter = set_21_MainPageViewModel_Vakken;
                break;
            case "Template10.Mvvm.ViewModelBase.NavigationService":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_22_ViewModelBase_NavigationService;
                xamlMember.Setter = set_22_ViewModelBase_NavigationService;
                break;
            case "Template10.Mvvm.ViewModelBase.Dispatcher":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Dispatcher", "Template10.Common.IDispatcherWrapper");
                xamlMember.Getter = get_23_ViewModelBase_Dispatcher;
                xamlMember.Setter = set_23_ViewModelBase_Dispatcher;
                break;
            case "Template10.Mvvm.ViewModelBase.SessionState":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.IStateItems");
                xamlMember.Getter = get_24_ViewModelBase_SessionState;
                xamlMember.Setter = set_24_ViewModelBase_SessionState;
                break;
            case "Template10.Controls.PageHeader.VisualStateNarrowMinWidth":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "VisualStateNarrowMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_PageHeader_VisualStateNarrowMinWidth;
                xamlMember.Setter = set_25_PageHeader_VisualStateNarrowMinWidth;
                break;
            case "Template10.Controls.PageHeader.VisualStateNormalMinWidth":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "VisualStateNormalMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_PageHeader_VisualStateNormalMinWidth;
                xamlMember.Setter = set_26_PageHeader_VisualStateNormalMinWidth;
                break;
            case "Template10.Controls.PageHeader.EllipsisVisibility":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "EllipsisVisibility", "Template10.Behaviors.EllipsisBehavior.Visibilities");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_PageHeader_EllipsisVisibility;
                xamlMember.Setter = set_27_PageHeader_EllipsisVisibility;
                break;
            case "Template10.Controls.PageHeader.PrimaryCommandsVisibility":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "PrimaryCommandsVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_PageHeader_PrimaryCommandsVisibility;
                xamlMember.Setter = set_28_PageHeader_PrimaryCommandsVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonVisibility":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "BackButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_PageHeader_BackButtonVisibility;
                xamlMember.Setter = set_29_PageHeader_BackButtonVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonContent":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "BackButtonContent", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_PageHeader_BackButtonContent;
                xamlMember.Setter = set_30_PageHeader_BackButtonContent;
                break;
            case "Template10.Controls.PageHeader.Frame":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Frame", "Windows.UI.Xaml.Controls.Frame");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_PageHeader_Frame;
                xamlMember.Setter = set_31_PageHeader_Frame;
                break;
            case "Template10.Controls.PageHeader.EnableHamburgerMenuAutoLayout":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "EnableHamburgerMenuAutoLayout", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_PageHeader_EnableHamburgerMenuAutoLayout;
                xamlMember.Setter = set_32_PageHeader_EnableHamburgerMenuAutoLayout;
                break;
            case "Template10.Controls.PageHeader.Text":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_PageHeader_Text;
                xamlMember.Setter = set_33_PageHeader_Text;
                break;
            case "Windows.UI.Color.A":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_34_Color_A;
                xamlMember.Setter = set_34_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_35_Color_B;
                xamlMember.Setter = set_35_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_36_Color_G;
                xamlMember.Setter = set_36_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_37_Color_R;
                xamlMember.Setter = set_37_Color_R;
                break;
            case "TestEnv1.ViewModel.CijferViewModel.Cijfers":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.CijferViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Cijfers", "System.Collections.ObjectModel.ObservableCollection`1<TestEnv1.Model.CijferGem>");
                xamlMember.Getter = get_38_CijferViewModel_Cijfers;
                xamlMember.Setter = set_38_CijferViewModel_Cijfers;
                break;
            case "TestEnv1.Model.CijferGem.Vaknaam":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.Model.CijferGem");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Vaknaam", "String");
                xamlMember.Getter = get_39_CijferGem_Vaknaam;
                xamlMember.Setter = set_39_CijferGem_Vaknaam;
                break;
            case "TestEnv1.Model.CijferGem.Laatste_Cijfer":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.Model.CijferGem");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Laatste_Cijfer", "String");
                xamlMember.Getter = get_40_CijferGem_Laatste_Cijfer;
                xamlMember.Setter = set_40_CijferGem_Laatste_Cijfer;
                break;
            case "TestEnv1.Model.CijferGem.Gem":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.Model.CijferGem");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Gem", "String");
                xamlMember.Getter = get_41_CijferGem_Gem;
                xamlMember.Setter = set_41_CijferGem_Gem;
                break;
            case "TestEnv1.Model.CijferGem.Achtergrondkleur":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.Model.CijferGem");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Achtergrondkleur", "String");
                xamlMember.Getter = get_42_CijferGem_Achtergrondkleur;
                xamlMember.Setter = set_42_CijferGem_Achtergrondkleur;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.SelectedComboboxItem":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "SelectedComboboxItem", "SOMTodayUWP.Models.Instellingen");
                xamlMember.Getter = get_43_LoginViewModel_SelectedComboboxItem;
                xamlMember.Setter = set_43_LoginViewModel_SelectedComboboxItem;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.Schools":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Schools", "System.Collections.ObjectModel.ObservableCollection`1<SOMTodayUWP.Models.Instellingen>");
                xamlMember.Getter = get_44_LoginViewModel_Schools;
                xamlMember.Setter = set_44_LoginViewModel_Schools;
                break;
            case "SOMTodayUWP.Models.Instellingen.naam":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SOMTodayUWP.Models.Instellingen");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "naam", "String");
                xamlMember.Getter = get_45_Instellingen_naam;
                xamlMember.Setter = set_45_Instellingen_naam;
                break;
            case "SOMTodayUWP.Models.Instellingen.plaats":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SOMTodayUWP.Models.Instellingen");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "plaats", "String");
                xamlMember.Getter = get_46_Instellingen_plaats;
                xamlMember.Setter = set_46_Instellingen_plaats;
                break;
            case "SOMTodayUWP.Models.Instellingen.uuid":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SOMTodayUWP.Models.Instellingen");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "uuid", "String");
                xamlMember.Getter = get_47_Instellingen_uuid;
                xamlMember.Setter = set_47_Instellingen_uuid;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.Username":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Username", "String");
                xamlMember.Getter = get_48_LoginViewModel_Username;
                xamlMember.Setter = set_48_LoginViewModel_Username;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.UUID":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "UUID", "String");
                xamlMember.Getter = get_49_LoginViewModel_UUID;
                xamlMember.Setter = set_49_LoginViewModel_UUID;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.Password":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Password", "String");
                xamlMember.Getter = get_50_LoginViewModel_Password;
                xamlMember.Setter = set_50_LoginViewModel_Password;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.RememberLoginData":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "RememberLoginData", "Boolean");
                xamlMember.Getter = get_51_LoginViewModel_RememberLoginData;
                xamlMember.Setter = set_51_LoginViewModel_RememberLoginData;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.Title":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_52_LoginViewModel_Title;
                xamlMember.Setter = set_52_LoginViewModel_Title;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.Sub":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Sub", "String");
                xamlMember.Getter = get_53_LoginViewModel_Sub;
                xamlMember.Setter = set_53_LoginViewModel_Sub;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.Paragraph":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Paragraph", "String");
                xamlMember.Getter = get_54_LoginViewModel_Paragraph;
                xamlMember.Setter = set_54_LoginViewModel_Paragraph;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.Button_read":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Button_read", "String");
                xamlMember.Getter = get_55_LoginViewModel_Button_read;
                xamlMember.Setter = set_55_LoginViewModel_Button_read;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.OrLogin":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "OrLogin", "String");
                xamlMember.Getter = get_56_LoginViewModel_OrLogin;
                xamlMember.Setter = set_56_LoginViewModel_OrLogin;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.ChooseSchool":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "ChooseSchool", "String");
                xamlMember.Getter = get_57_LoginViewModel_ChooseSchool;
                xamlMember.Setter = set_57_LoginViewModel_ChooseSchool;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.UsernameBox":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "UsernameBox", "String");
                xamlMember.Getter = get_58_LoginViewModel_UsernameBox;
                xamlMember.Setter = set_58_LoginViewModel_UsernameBox;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.PasswordBox":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "PasswordBox", "String");
                xamlMember.Getter = get_59_LoginViewModel_PasswordBox;
                xamlMember.Setter = set_59_LoginViewModel_PasswordBox;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.RememberMe":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "RememberMe", "String");
                xamlMember.Getter = get_60_LoginViewModel_RememberMe;
                xamlMember.Setter = set_60_LoginViewModel_RememberMe;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.Login_button":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "Login_button", "String");
                xamlMember.Getter = get_61_LoginViewModel_Login_button;
                xamlMember.Setter = set_61_LoginViewModel_Login_button;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.ChooseLang":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "ChooseLang", "String");
                xamlMember.Getter = get_62_LoginViewModel_ChooseLang;
                xamlMember.Setter = set_62_LoginViewModel_ChooseLang;
                break;
            case "TestEnv1.ViewModel.LoginViewModel.DoSOMLogin":
                userType = (global::TestEnv1.TestEnv1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TestEnv1.ViewModel.LoginViewModel");
                xamlMember = new global::TestEnv1.TestEnv1_XamlTypeInfo.XamlMember(this, "DoSOMLogin", "Template10.Mvvm.DelegateCommand");
                xamlMember.Getter = get_63_LoginViewModel_DoSOMLogin;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::TestEnv1.TestEnv1_XamlTypeInfo.XamlSystemBaseType
    {
        global::TestEnv1.TestEnv1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::TestEnv1.TestEnv1_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::TestEnv1.TestEnv1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::TestEnv1.TestEnv1_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

